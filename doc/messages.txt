cron message frames
===================

"cron.add" - adds a job to the queue
{
	"timestamp" : 20, 			- how many ticks until it starts, must be > 0
	"period" : 10,	  			- when to repeat
	"count" : 1,	  			- how often to repeat. < 0 means, forever
	"message" : "message.id",	- message id to send
	"data" : {					- message tail to send
		"this": "is a json structure",
	},
},

"cron.del" - deletes a job from queue
{
	"message" : "message.id",	- message id to delete
},

speech message frames
=====================

"speech.speak" - speak text
{
	"text"  : "text to speak",
}

"speech.cancel" - cancel speech
{}

speech recognition frames
=========================

"sphinx.start" - start recognition
{}

"sphinx.stop" - stop recognition
{}


i2c message frames
==================

"i2c.read" - read from address, responses in sensor.i2c
{
	"slave" :	10,		- slave address
	"addr" :	120,	- register to read
	"length" :	2,		- number of bytes to read
}


"i2c.read" - read from address
{
	"slave" :	10,		- slave address
	"addr" :	120,	- register to start
	"data" : 	"b64",	- b64 encoded data
}


can message frames
==================
"can.send"	- send data to can
{
	"messageid" : 20 	- id of the can message
	"message64" : "b64" - b64 encoded data
}


sensor data frames
==================

"sensor.i2c" - having data from i2c
{
	"slave" :	10,		- slave address
	"addr" :	120,	- register read
	"length" :	2,		- number of bytes read
	"data" : 	"b64",	- b64 encoded data
} 

"sensor.can" - having data from can
{
	"messageid" : 20 	- id of the can message
	"message64" : "b64" - b64 encoded data
}

"sensor.gpio" - having data from gpio
{
	"data" : 20 		- data received
	"change" : 92		- changed data
}

direct order data frames
these have to be generated by interpreters
==========================================
"order.go"	- move forward
{}

"order.back"	- move backwards
{}

"order.stop"	- stand
{}

"order.sit"		- sit
{}

"order.lie"		- lay down
{}

"order.turnleft" - turn left
{}

"order.turnright"	- turn right
{}


world interpretation data frames
these have to be generated by interpreters
and are used by standard reaction procedures
============================================
"world.object" - obstacle found or already collided
{
	"type"		: "",
	"size"		: "x,y,z",
	"position"	: "x,y,z",
	"orientation" : "x,y,z",
	"speed"	: "x,y,z",
} 

"world.moved" -	odometric sensor data
{
	"acc"	:	"accelleration",
	"gyro"	:	"rotation",
	"compass" : "compass",
}

world interaction data frames
these are generated by standard reaction procedures
and have to be implemented by planner agents
===================================================
movement interaction
====================
"move.flee" - flee from an object
{
  "object"	  : "object",		- the object to flee from
  "direction" : "x,y,z",		- !! This says, where the object is
  "distance"  : "100cm, ..", 		- min distance to reach to the object
}

"move.turn"	- just turn
{
  "orientation" : "x,y,z",		- orientation angle to reach
}

"move.destination" - move towards
{
  "object"	  : "object",		- the object to move towards
  "direction" : "x,y,z",		- !! This tells the destination to move
  "distance"  : "100cm, ..", 		- max distance to reach to the object
}

"move.surround" - surround an object
{
  "object"	  : "object",		- the object to surround
  "direction" : "x,y,z",		- !! This tells the position to surround
  "distance"  : "100cm, ..", 		- distance to surround the object
}

"move.get" - get an object, only possible if robot can get things
{
  "object"	  : "object",		- the object to get
  "direction" : "x,y,z",		- !! This tells the object to get
  "distance"  : "100cm, ..", 	- distance to the object
}

"move.put" - get an object, only possible if robot can get things
{
  "object"	  : "object",		- the object to put
  "direction" : "x,y,z",		- !! This tells where to put the object
  "distance"  : "100cm, ..", 	- to the point to put it
}

"move.stand" - stand still
{}

"move.sit"	 - sit down, if available. otherwise stand
{}

"move.lie"	 - lay down, if available. otherwise sit
{}


other actions
=============
"action.tell" - tell something. can be speech or text output
{
	"data" : "dataset" - hint, what to tell
}
